// {{classname}}{{#description}} {{{description}}}{{/description}}{{^description}} struct for {{{classname}}}{{/description}}
type {{classname}} struct {
{{#parent}}
{{^isMap}}
{{^isArray}}
	{{{parent}}}
{{/isArray}}
{{/isMap}}
{{#isArray}}
	Items {{{parent}}}
{{/isArray}}
{{/parent}}
{{#vars}}
{{^-first}}
{{/-first}}
{{#description}}
	// {{{description}}}
{{/description}}
{{#vendorExtensions.x-export-param-name-override}}{{vendorExtensions.x-export-param-name-override}}{{/vendorExtensions.x-export-param-name-override}}{{^vendorExtensions.x-export-param-name-override}}{{name}}{{/vendorExtensions.x-export-param-name-override}} {{^required}}{{^isNullable}}{{^vendorExtensions.x-allow-empty}}*{{/vendorExtensions.x-allow-empty}}{{/isNullable}}{{/required}}{{{dataType}}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"{{#withXml}} xml:"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`
{{/vars}}
{{#additionalProperties}}
	// {{{description}}}
	AdditionalProperties map[string]interface{}
{{/additionalProperties}}
}

{{#additionalProperties}}
type _{{{classname}}} {{{classname}}}

{{/additionalProperties}}
// New{{classname}} instantiates a new {{classname}} object.
// This constructor will assign default values to properties that have it
// defined, and makes sure properties required by API are set, but the set of
// arguments will change when the set of required properties is changed.
func New{{classname}}({{#requiredVars}}{{nameInCamelCase}} {{dataType}}{{^-last}}, {{/-last}}{{/requiredVars}}) *{{classname}} {
	return &{{classname}}{
{{#allVars}}
{{#required}}
		{{#vendorExtensions.x-export-param-name-override}}{{vendorExtensions.x-export-param-name-override}}{{/vendorExtensions.x-export-param-name-override}}{{^vendorExtensions.x-export-param-name-override}}{{name}}{{/vendorExtensions.x-export-param-name-override}}: {{nameInCamelCase}},
{{/required}}
{{^required}}
{{#defaultValue}}
{{^vendorExtensions.x-golang-is-container}}
{{#isNullable}}
	var {{nameInCamelCase}} {{{datatypeWithEnum}}} = {{{.}}}
	this.{{name}} = *New{{{dataType}}}(&{{nameInCamelCase}})
{{/isNullable}}
{{^isNullable}}
	var {{nameInCamelCase}} {{{dataType}}} = {{{.}}}
	this.{{name}} = &{{nameInCamelCase}}
{{/isNullable}}
{{/vendorExtensions.x-golang-is-container}}
{{/defaultValue}}
{{/required}}
{{/allVars}}
	}
}

// MarshalJSON serialises data in the struct to JSON.
func (o {{classname}}) MarshalJSON() ([]byte, error) {
	toSerialize := {{#isArray}}make([]interface{}, len(o.Items)){{/isArray}}{{^isArray}}map[string]interface{}{}{{/isArray}}
{{#parent}}
{{^isMap}}
{{^isArray}}
	serialized{{parent}}, err{{parent}} := json.Marshal(o.{{parent}})
	if err{{parent}} != nil {
		return []byte{}, err{{parent}}
	}
	err{{parent}} = json.Unmarshal([]byte(serialized{{parent}}), &toSerialize)
	if err{{parent}} != nil {
		return []byte{}, err{{parent}}
	}
{{/isArray}}
{{/isMap}}
{{#isArray}}
	for i, item := range o.Items {
		toSerialize[i] = item
	}
{{/isArray}}
{{/parent}}
{{#vars}}
{{! if argument is nullable, only serialize it if it is set}}
{{#isNullable}}
{{#vendorExtensions.x-golang-is-container}}
{{! support for container fields is not ideal at this point because of lack of Nullable* types}}
	if o.{{name}} != nil {
		toSerialize["{{baseName}}"] = o.{{#vendorExtensions.x-export-param-name-override}}{{vendorExtensions.x-export-param-name-override}}{{/vendorExtensions.x-export-param-name-override}}{{^vendorExtensions.x-export-param-name-override}}{{name}}{{/vendorExtensions.x-export-param-name-override}}
	}
{{/vendorExtensions.x-golang-is-container}}
{{^vendorExtensions.x-golang-is-container}}
	if {{#required}}true{{/required}}{{^required}}o.{{name}}.IsSet(){{/required}} {
		toSerialize["{{baseName}}"] = o.{{name}}.Get()
	}
{{/vendorExtensions.x-golang-is-container}}
{{/isNullable}}
{{! if argument is not nullable, don't set it if it is nil}}
{{^isNullable}}
	if {{#required}}true{{/required}}{{^required}}o.{{#vendorExtensions.x-export-param-name-override}}{{vendorExtensions.x-export-param-name-override}}{{/vendorExtensions.x-export-param-name-override}}{{^vendorExtensions.x-export-param-name-override}}{{name}}{{/vendorExtensions.x-export-param-name-override}} != nil{{/required}} {
		toSerialize["{{baseName}}"] = o.{{#vendorExtensions.x-export-param-name-override}}{{vendorExtensions.x-export-param-name-override}}{{/vendorExtensions.x-export-param-name-override}}{{^vendorExtensions.x-export-param-name-override}}{{name}}{{/vendorExtensions.x-export-param-name-override}}
	}
{{/isNullable}}
{{/vars}}
{{#additionalProperties}}
	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}
{{/additionalProperties}}
	return json.Marshal(toSerialize)
}
{{#additionalProperties}}

// UnmarshalJSON deserialises JSON into a struct.
func (o *{{{classname}}}) UnmarshalJSON(bytes []byte) (error) {
	var{{{classname}}} := _{{{classname}}}{}
	if err := json.Unmarshal(bytes, &var{{{classname}}}); err != nil {
		return err
	}

	*o = {{{classname}}}(var{{{classname}}})

	additionalProperties := make(map[string]interface{})
	if err := json.Unmarshal(bytes, &additionalProperties); err != nil {
		return err
	}

	// This is a hack to ensure the `self` key is removed from additional
	// properies. This is adequate since we only expect this single key to be
	// present. But this is not scalable.
	delete(additionalProperties, "self")
	o.AdditionalProperties = additionalProperties

	return nil
}
{{/additionalProperties}}
{{^additionalProperties}}
{{#isArray}}

// UnmarshalJSON deserialises JSON into a struct.
func (o *{{{classname}}}) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}
{{/isArray}}
{{/additionalProperties}}
