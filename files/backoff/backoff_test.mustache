{{>partial_header}}
package backoff_test

import (
	"testing"
	"time"

	"{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/backoff"
)

func TestConstant(t *testing.T) {
	t.Run("returns a constant duration", func(t *testing.T) {
		b := backoff.Constant{
			BaseDelay: 6.0 * time.Second,
		}

		retries := 5

		expected := b.BaseDelay
		got := b.Backoff(retries)

		if expected != got {
			t.Errorf("expected: %s, got: %s", expected, got)
		}
	})
}

func TestExponential(t *testing.T) {
	b := backoff.Exponential{
		BaseDelay:  1.0 * time.Second,
		Multiplier: 2.0, // Exponential factor.
		Jitter:     0,   // To make test predictible.
		MaxDelay:   120 * time.Second,
	}

	tests := []struct{
		name     string
		idx      int
		expected time.Duration
	}{
		{
			name:     "returns the base delay for the initial index",
			idx:      0,
			expected: b.BaseDelay,
		},
		{
			name:     "returns the next duration in an exponential sequence",
			idx:      5,
			expected: time.Duration(32 * time.Second),
		},
		{
			name:     "returns the maximum delay when the calculated backoff exceeds the maximum",
			idx:      7,
			expected: b.MaxDelay,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := b.Backoff(tt.idx)
			if tt.expected != got {
				t.Errorf("expected: %s, got: %s", tt.expected, got)
			}
		})
	}
}

func TestLinear(t *testing.T) {
	b := backoff.Linear{
		BaseDelay: 1.0 * time.Second,
		Jitter:    0, // To make test predictible.
		MaxDelay:  120 * time.Second,
	}

	tests := []struct{
		name     string
		idx      int
		expected time.Duration
	}{
		{
			name:     "returns the base delay for the initial index",
			idx:      0,
			expected: b.BaseDelay,
		},
		{
			name:     "returns the next duration in a linear sequence",
			idx:      5,
			expected: time.Duration(6 * time.Second),
		},
		{
			name:     "returns the maximum delay when the calculated backoff exceeds the maximum",
			idx:      120,
			expected: b.MaxDelay,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := b.Backoff(tt.idx)
			if tt.expected != got {
				t.Errorf("expected: %s, got: %s", tt.expected, got)
			}
		})
	}
}
